if [ ! "$_SYSTEM_SUBR" ]; then
_SYSTEM_SUBR=1
###

conv2human()
{
	local lhal="B"
	local tmpmem="$1"
	local lval

	human_val=""

	for hval in "Kb" "Mb" "Gb" "Tb"; do
		mem=$(( tmpmem / 1024 ))
		[ "${mem}" = "0" ] && break
		tmpmem=${mem}
		lval="${hval}"
	done

	human_val="${tmpmem} ${lval}"
}


UNAME_CMD=$( which uname )
if [ ! -x "${UNAME_CMD}" ]; then
	echo "error: no such command: uname"
	exit 1
fi

TR_CMD=$( which tr )
if [ ! -x "${TR_CMD}" ]; then
	echo "error: no such command: tr"
	exit 1
fi

OS=$( ${UNAME_CMD} -s )

case "${OS}" in
	Linux)
		ECHO="echo"
		;;
	FreeBSD)
		ECHO="echo -e"
		;;
esac

# generic mandatory tools/script
MAIN_CMD="
awk
basename
cat
column
chmod
chown
cp
curl
cut
dd
find
fio
grep
head
jq
mkdir
mount
mv
mktemp
openssl
realpath
rm
sed
sort
strings
sysctl
tar
tail
tee
truncate
wc
whoami
"

case "${OS}" in
	Linux)
		id_token_file='/var/run/send-perf-stats'
		MAIN_CMD="${MAIN_CMD} lsblk"
		# Linux require -i'', not -i ' '
		sed_delimer=
		;;
	FreeBSD)
		id_token_file='/var/db/send-perf-stats'
		MAIN_CMD="${MAIN_CMD} camcontrol diskinfo"
		sed_delimer=" "
		;;
esac


if [ "${USE_TOR}" = "YES" ]; then
	MAIN_CMD="${MAIN_CMD} nc"
fi

for i in ${MAIN_CMD}; do
	mycmd=
	mycmd=$( which ${i} || true )		# true for 'set -e' case
	if [ ! -x "${mycmd}" ]; then
		echo "${pgm} error: no such executable dependency/requirement: ${i}"
		exit 1
	fi

	MY_CMD=$( echo ${i} | ${TR_CMD} '\-[:lower:]' '_[:upper:]' )
	MY_CMD="${MY_CMD}_CMD"
	eval "${MY_CMD}=\"${mycmd}\""
done

MY_USER=$( ${WHOAMI_CMD} )
if [ "${MY_USER}" != "root" ]; then
	echo "${pgm} error: needs root privileges, my user: ${MY_USER}"
	exit 1
fi

if [ -r /etc/os-release ]; then
	NAME=
	PRETTY_NAME=
	. /etc/os-release
	if [ -n "${NAME}" ]; then
		OPSYS="${NAME}"
	elif [ -n "${PRETTY_NAME}" ]; then
		OPSYS="${PRETTY_NAME}"
	else
		OPSYS="${OS}"
	fi
fi

# return DSK_INFO (text/vendor info for /dev/$1 ) and BSIZE (size in bytes)
dsk_info()
{
	local _dev="${1}"

	DSK_INFO=
	BSIZE=

	# Try and find some identification information with camcontrol or atacontrol
	DSK_INFO=$( ${CAMCONTROL_CMD} identify /dev/${_dev} 2>/dev/null | ${SED_CMD} -ne 's/^device model *//p' )
	if [ -z "${DSK_INFO}" ]; then
		# regex notes: camcontrol can be (order <device>,pass o_O?:
		# # camcontrol devlist
		# <TOSHIBA MG07ACA12TE 0104>         at scbus0 target 0 lun 0 (pass0,ada0)
		# <TOSHIBA MG07ACA12TE 0104>         at scbus1 target 0 lun 0 (pass1,ada1)
		# or
		# # camcontrol devlist
		#<Samsung SSD 980 1TB 1B4QFXO7>     at scbus8 target 0 lun 1 (pass0,nda0)
		#<AMI Virtual CDROM0 1.00>          at scbus9 target 0 lun 0 (cd0,pass1)
		#<AMI Virtual Floppy0 1.00>         at scbus10 target 0 lun 0 (da0,pass2)
		#<AMI Virtual HDisk1 1.00>          at scbus11 target 0 lun 1 (da5,pass7)
		DSK_INFO=$( ${CAMCONTROL_CMD} devlist | ${GREP_CMD} -E "(\(|,)${i}(\)|,)"   | ${GREP_CMD} '^<' )
		DSK_INFO=${DSK_INFO#*<}
		DSK_INFO=${DSK_INFO%>*}
		if [ -n "${DSK_INFO}" ]; then
			DSK_INFO=$( echo ${DSK_INFO} | ${TR_CMD} -d '<>' )
		fi
		[ -z "${DSK_INFO}" ] && DSK_INFO=" <Can't identify model>"
	fi

	BSIZE=$( ${DISKINFO_CMD} /dev/${i} 2>/dev/null | ${AWK_CMD} '{printf $3}' )
	[ -z "${BSIZE}" ] && BSIZE="0"
}

###
fi
